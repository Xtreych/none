import asyncio

from aiogram import Bot, F, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, \
    KeyboardButton
from database import database
from keyboard import online, inline
from aiogram.methods import SendPhoto

token = "7374319690:AAHLXuN-98UqMqJD0ZAkcLlrCRsoeQuGO4E"

bot = Bot(token)
dp = Dispatcher()
db = database("users.db")

@dp.message(Command("start"))
async def start_message(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    
    if user is None:
        db.new_user(message.from_user.id)
        await message.answer(
            "üë• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç –ë–æ—Ç!\n"
            "üó£ –ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.",
            #reply_markup = online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
            reply_markup= InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–Ø –¥–µ–≤—É—à–∫–∞', callback_data='gender_female')],
                [InlineKeyboardButton(text='–Ø –º—É–∂—á–∏–Ω–∫–∞', callback_data='gender_male')]
            ])
        )
    else:
        await message.answer(
            "üë• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç –ë–æ—Ç!\n\n"
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
            #f"üëÅ‚Äçüó® –õ—é–¥–µ–π –≤ –ø–æ–∏—Å–∫–µ: {db.get_users_in_search()}",
            reply_markup = online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
        )

@dp.message(F.text == "üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
async def search_chat(message: Message):
    user = db.get_user_cursor(message.from_user.id)

    if user is not None:
        rival = db.search(message.from_user.id)

        if rival is None:
            await message.answer(
                "üîé –í—ã –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ —Å–æ—Ä–æ–ª–∞...",
                #f"üëÅ‚Äçüó® –õ—é–¥–µ–π –≤ –ø–æ–∏—Å–∫–µ: {db.get_users_in_search()}",
                reply_markup = online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫ —Å–æ—Ä–æ–ª–∞")
            )
        else:
            db.start_chat(message.from_user.id, rival["id"])

            string = "‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω!\n"
            string += "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–∂–º–∏—Ç–µ \"‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\""

            await message.answer(string, reply_markup = online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"))
            await bot.send_message(rival["id"], string, reply_markup = online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"))

@dp.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫ —Å–æ—Ä–æ–ª–∞")
async def stop_search(message: Message):
    user = db.get_user_cursor(message.from_user.id)

    if user is not None:
        if user["status"] == 1:
            db.stop_search(message.from_user.id)

            await message.answer(
                "‚úÖ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–∏—Å–∫ —Å–æ—Ä–æ–ª–∞",
                reply_markup = online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
            )

@dp.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def stop_chat(message: Message):
    user = db.get_user_cursor(message.from_user.id)

    if user is not None:
        if user["status"] == 2:
            db.stop_chat(message.from_user.id, user["rid"])

            await message.answer(
                "‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å —Å–æ—Ä–æ–ª–æ–º.\n\n"
                "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ \"üîé –ù–∞–π—Ç–∏ —á–∞—Ç\"",
                reply_markup = online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
            )

            await bot.send_message(user["rid"],
                "‚ùå –° –≤–∞–º–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥.\n\n"
                "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ \"üîé –ù–∞–π—Ç–∏ —á–∞—Ç\"",
                reply_markup = online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
            )

@dp.message()
async def handler_message(message: Message):
    user = db.get_user_cursor(message.from_user.id)

    #if int(user["age"]) != 0:
    if user is not None:
        if user["status"] != 0:
            if user["status"] == 2:
                # await bot.send_message(1371198599, str(message))
                if message.photo is not None:
                    await bot.send_photo(chat_id=user["rid"], photo=message.photo[-1].file_id,
                                         caption = message.caption)
                elif message.text is not None:
                    await bot.send_message(user["rid"], message.text)
                elif message.voice is not None:
                    await bot.send_audio(chat_id=user["rid"], audio=message.voice.file_id,
                                            caption = message.caption)
                elif message.video_note is not None:
                    await bot.send_video_note(chat_id=user["rid"], video_note=message.video_note.file_id)
                elif message.sticker is not None:
                    await bot.send_sticker(chat_id=user["rid"], sticker = message.sticker.file_id)
        else:
            if message.text.isdigit() and 0 < int(message.text) < 80:
                age = int(message.text)
                db.update_user_age(message.from_user.id, age)
                await message.answer(f"‚úÖ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç {age} –ª–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ—Ä–æ–ª–µ—Ä–∞!",
                                       reply_markup = online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç"))
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 80).")

# @dp.message()
# async def handle_age_input(message: Message):
#     user = db.get_user_cursor(message.from_user.id)
#
#     if user is not None and "gender" in user:
#         if message.text.isdigit() and 0 < int(message.text) < 80:
#             age = int(message.text)
#             db.update_user_age(message.from_user.id, age)
#             await message.answer(f"‚úÖ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç {age} –ª–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ—Ä–æ–ª–µ—Ä–∞!",
#                                   reply_markup = online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç"))
#         else:
#             await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 80).")
                
@dp.callback_query(F.data.startswith("gender_"))
async def handle_gender_selection(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    gender = callback_query.data.split("_")[1]

    db.update_user_gender(user_id, gender)

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏: {gender.capitalize()}.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")

    await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")

async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())




