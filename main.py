import asyncio
import re
import logging
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta
from typing import Optional
from dataclasses import dataclass
from functools import wraps

from aiogram import Bot, F, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, \
    KeyboardButton, ReplyKeyboardMarkup
from database import database
from aiogram.exceptions import TelegramBadRequest

import keyboard
import generator_scenary
import backup

from theme import get_full_theme_description

from yookassa import Configuration, Payment
import uuid

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

atoken = input("–ö–∞–∫–æ–π —Ç–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ–º?\n"
      "1 - —Ç–µ—Å—Ç-–±–æ—Ç\n"
      "2 - –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç\n")

if atoken == "1":
    token = "2079887601:AAEvAOrx9696k0CVgL2SOTz_Cb5_O5qBoTo"
else:
    token = "7374319690:AAHLXuN-98UqMqJD0ZAkcLlrCRsoeQuGO4E"

aexecutor = input("–ë–µ–∫–∞–ø –∑–∞–ø—É—Å–∫–∞—Ç—å?\n"
                  "1 - –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å\n"
                  "2 - –∑–∞–ø—É—Å–∫–∞—Ç—å\n")

bot = Bot(token)
dp = Dispatcher()
db = database("users.db")
thread_pool = ThreadPoolExecutor(max_workers=100)  # –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
executor = ThreadPoolExecutor(max_workers=2)

if aexecutor != "1":
    backup_future = executor.submit(backup.start)

link_text_news = "- –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞"
url_news = "https://t.me/RP_Anon_ChatBot_News"
link_text_TS = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
url_TS = "https://t.me/TS_RP_Anon_ChatBot"
link_text_Tayova = "- Tayova"
url_Tayova = "https://t.me/tayovamask"

#–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è
Bes = 1978805110
Besovskaya = 1171214769
Serj = 686803928

user_states = {}
USER_STATE_TIMEOUT = timedelta(minutes=30)

def cleanup_user_states():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    current_time = datetime.now()
    expired_states = [
        user_id for user_id, (state, timestamp) in user_states.items()
        if current_time - timestamp > USER_STATE_TIMEOUT
    ]
    for user_id in expired_states:
        del user_states[user_id]

def set_user_state(user_id: int, state: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cleanup_user_states()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_states[user_id] = (state, datetime.now())

def get_user_state(user_id: int) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_states:
        state, timestamp = user_states[user_id]
        if datetime.now() - timestamp > USER_STATE_TIMEOUT:
            del user_states[user_id]
            return None
        return state
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async def check_user_block(user_id: int, message: Message = None, callback: CallbackQuery = None) -> bool:
    is_blocked, reason = db.is_user_blocked(user_id)
    if is_blocked:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ", callback_data="block_info")]
        ])
        
        text = "‚õîÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ."
        
        if message:
            await message.answer(text, reply_markup=keyboard)
        elif callback:
            await callback.message.edit_text(text, reply_markup=keyboard)
            
        return True
    return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
@dp.callback_query(F.data == "block_info")
async def show_block_info(callback: CallbackQuery):
    user_id = callback.from_user.id
    is_blocked, reason = db.is_user_blocked(user_id)
    
    if not is_blocked:
        await callback.message.edit_text(
            "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=get_main_keyboard(user_id)
        )
        return

    block_info = db.get_block_info(user_id)
    if not block_info:
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ", show_alert=True)
        return

    blocked_until, reason, complaint_id = block_info
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    current_time = datetime.now()
    block_until = datetime.strptime(blocked_until, '%Y-%m-%d %H:%M:%S')
    time_left = block_until - current_time
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –≤—Ä–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–π –º–∏–Ω—É—Ç—ã
    total_minutes = int(time_left.total_seconds() / 60)
    hours_left = total_minutes // 60
    minutes_left = total_minutes % 60

    message_text = (
        f"‚õîÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:\n\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"üî¢ –ù–æ–º–µ—Ä –∂–∞–ª–æ–±—ã: #{complaint_id if complaint_id else '–ù/–î'}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {hours_left}—á {minutes_left}–º–∏–Ω\n"
        f"üìÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {block_until.strftime('%d.%m.%Y %H:%M')}"
    )

    try:
        await callback.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="block_info")]
            ])
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞", show_alert=True)

@dp.message(Command("start"))
async def start_message(message: Message):
    user_id = message.from_user.id
    user = db.get_user_cursor(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã start –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    args = message.text.split()

    if await check_user_block(message.from_user.id, message=message):
        return
    elif user is None:
        db.new_user(user_id)

        if len(args) > 1:
            referral_code = args[1]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –Ω–∞–ø—Ä—è–º—É—é
            if referral_code.startswith("ref_"):
                referral_code = referral_code[4:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å ref_
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
                    owner_id = db.get_referral_code_owner(referral_code)
                    if owner_id is not None:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
                        current_ref = db.check_user_referral(user_id)
                        if current_ref is None:  # –ò–∑–º–µ–Ω–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
                            if db.update_user_referral(user_id, referral_code):
                                await message.answer(
                                    f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!"
                                )
                            else:
                                logger.error(f"Failed to apply referral code {referral_code} for user {user_id}")
                                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞")
                    else:
                        logger.error(f"Invalid referral code {referral_code} for user {user_id}")
                except Exception as e:
                    logger.error(f"Error applying referral code: {e}")

        await message.answer(
            "üë• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ß–∞—Ç-–±–æ—Ç —Ä–æ–ª–µ–≤–∏–∫–æ–≤!\n"
            "üó£ –ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–æ–ª–µ—Ä–æ–≤.\n\n"
            "üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞: \n"
            f'<a href="{url_news}">{link_text_news}</a>\n\n'
            f'- –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º!\n'
            f'üìû <a href="{url_TS}">{link_text_TS}</a>\n\n'
            "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
            f'<a href="{url_Tayova}">{link_text_Tayova}</a>', 
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–Ø –¥–µ–≤—É—à–∫–∞', callback_data='gender_female')],
                [InlineKeyboardButton(text='–Ø –º—É–∂—á–∏–Ω–∞', callback_data='gender_male')]
            ])
        )
    else:
        await message.answer(
            "üë• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ß–∞—Ç-–±–æ—Ç —Ä–æ–ª–µ–≤–∏–∫–æ–≤!\n\n"
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ\n\n"
            "üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞: \n"
            f'<a href="{url_news}">{link_text_news}</a>\n\n'
            f'- –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º!\n'
            f'üìû <a href="{url_TS}">{link_text_TS}</a>\n\n'
            "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
            f'<a href="{url_Tayova}">{link_text_Tayova}</a>', 
            parse_mode='HTML',
            reply_markup=get_main_keyboard(user_id)
        )


@dp.message(F.text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥")
async def referral_code_request(message: Message):
    user_id = message.from_user.id
    try:
        owned_codes = db.get_user_referral_codes(user_id)

        if owned_codes:
            response = "üìä –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            for code in owned_codes:
                if not code or not code[0]:
                    continue
                count = db.count_referral(code[0])
                count = str(count).strip('(),')
                referral_link = db.create_referral_link(code[0])
                response += f"–ö–æ–¥: {code[0]}\n"
                response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {count}\n"
                response += f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"

            await message.answer(
                response,
                reply_markup=get_main_keyboard(user_id)
            )
        else:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:",
                reply_markup=keyboard.get_back_keyboard()
            )
            set_user_state(user_id, 'awaiting_referral_code')
    except Exception as e:
        logger.error(f"Error in referral_code_request: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def open_admin_panel(message: Message):
    if db.is_admin(message.from_user.id):
        await message.answer(
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard.get_admin_keyboard()
        )

@dp.callback_query(F.data == "add_ref_code")
async def add_ref_code_start(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞–æ—Ä–∞!", show_alert=True)
        return

    set_user_state(callback.from_user.id, "waiting_ref_code")
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–∫–æ–¥ ID\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: Tayova19 1095086092",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
        ])
    )

@dp.callback_query(F.data == "remove_ref_code")
async def remove_ref_code_start(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    codes = db.get_all_referral_codes()
    keyboard = []
    for code, owner_id in codes:
        keyboard.append([InlineKeyboardButton(
            text=f"‚ùå {code} (ID: {owner_id})",
            callback_data=f"del_ref_{code}"
        )])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(F.data.startswith("del_ref_"))
async def remove_ref_code(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    code = callback.data.split("_")[2]
    if db.remove_referral_code(code):
        await callback.answer("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–¥–∞!")

    await callback.message.edit_text(
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=keyboard.get_admin_keyboard()
    )

@dp.callback_query(F.data == "manage_admins")
async def manage_admins(callback: CallbackQuery):
    if callback.from_user.id not in [Bes, Besovskaya, Serj]:
        await callback.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏!", show_alert=True)
        return

    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:",
        reply_markup=keyboard.get_manage_admins_keyboard()
    )

@dp.callback_query(F.data == "add_admin")
async def add_admin_start(callback: CallbackQuery):
    if callback.from_user.id not in [Bes, Besovskaya, Serj]:
        await callback.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!", show_alert=True)
        return

    set_user_state(callback.from_user.id, "waiting_admin_id")
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä—Ç–æ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
        ])
    )

@dp.callback_query(F.data == "ref_stats")
async def show_ref_stats(callback: CallbackQuery):
    user_id = callback.from_user.id

    if db.is_admin(user_id):
        all_codes = db.get_all_referral_codes()
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤:\n\n"

        for code, owner_id in all_codes:
            users = db.print_users_by_referral(code)
            count = len(users) if users else 0
            response += f"–ö–æ–¥: {code}\n–í–ª–∞–¥–µ–ª–µ—Ü ID: {owner_id}\n"
            response += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {count}\n"
            response += f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n\n"
    else:
        all_codes = db.get_all_referral_codes()
        response = "üìä –í–∞—à–∞ —Ä–µ—Ñ—Ä–∞–ª—å–Ω–∞—è —Å—Ç—Ç—Å–∏–∫–∞:\n\n"

        for code, owner_id in all_codes:
            if owner_id == user_id:
                count = db.count_referral(code)
                response += f"–ö–æ–¥: {code}\n"
                response += f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {count}\n\n"

    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ])
    )

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def referral_code(message: Message):
    idinty = message.from_user.id
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(idinty))


@dp.message(F.text == "üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
async def search_chat(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    is_blocked, reason = db.is_user_blocked(message.from_user.id)
    user = db.get_user_cursor(message.from_user.id)

    if user is not None:
        if is_blocked:
            await message.answer(
                f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        elif user["status"] == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø–æ–∏—Å–∫–µ –∏ –Ω–µ –≤ —á–∞—Ç–µ
            rival = db.search(message.from_user.id)

            if rival is None:
                await message.answer(
                    "üîé –í—ã –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ —Å–æ—Ä–æ–ª–∞...",
                    reply_markup=keyboard.get_search_keyboard()
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                string = "‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω!\n"
                string += "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–∂–º–∏—Ç–µ \"‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\""

                await message.answer(string, reply_markup=keyboard.get_cancel_keyboard())
                try:
                    await bot.send_message(rival["id"], string, reply_markup=keyboard.get_cancel_keyboard())
                except Exception as e:
                    print(f"Error sending message to rival: {e}")
                    # –æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ—Ç–∫–∞—Ç–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–∏—Ç—å
                    db.stop_chat(message.from_user.id, rival["id"])
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É. –ü–æ–ø—Ä–æ—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            await message.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∏—Å–∫–µ –∏–ª–∏ —á–∞—Ç–µ!")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text == "–°—Ü–µ–Ω–∞—Ä–∏–π")
async def check_referral(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è:",
        reply_markup=keyboard.get_genre_keyboard()
    )

@dp.callback_query(F.data.startswith("gender_"))
async def handle_gender_selection(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    gender = callback_query.data.split("_")[1]

    db.update_user_gender(user_id, gender)

    await bot.answer_callback_query(callback_query.id)
    if gender.capitalize() == "Male":
        await bot.send_message(user_id, "–∞—à –ø–æ–ª –º—É–∂—Å–∫–æ–π.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    else: await bot.send_message(user_id, "–í–∞—à –ø–æ–ª –∂–µ–Ω—Å–∫–∏–π.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")

    await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")

@dp.callback_query(F.data.startswith("genre_"))
async def handle_genre_selection(callback_query: CallbackQuery):
    genre = callback_query.data.split("_")[1]
    genre_names = {
        "post": "–ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å",
        "romance": "–†–æ–º–∞–Ω—Ç–∏–∫–∞",
        "cyber": "–ö–∏–±–µ—Ä–ø–∞–Ω–∫",
        "fantasy": "–§—ç–Ω—Ç–µ–∑–∏",
        "mystic": "–ú–∏—Å—Ç–∏–∫–∞",
        "history": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è",
        "scifi": "–ù–∞—É—á–Ω–∞—è –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
        "horror": "–•–æ—Ä—Ä–æ—Ä",
        "super": "–°—É–≥–µ—Ä–æ–∏–∫–∞",
        "terror": "–£–∂–∞—Å—ã",
        "detective": "–î–µ—Ç–µ–∫—Ç–∏–≤",
        "dystopia": "–î–∏—Å—É—Ç–æ–ø–∏—è"
    }

    selected_genre = genre_names.get(genre, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∂–∞–Ω—Ä")
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–∞–Ω—Ä: {selected_genre}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=keyboard.get_theme_keyboard(genre)
    )


@dp.callback_query(F.data.startswith("theme_"))
async def handle_theme_selection(callback_query: CallbackQuery):
    theme_data = callback_query.data.split("_")
    genre = theme_data[1]
    theme_number = int(theme_data[2])
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–µ
    user = db.get_user_cursor(user_id)

    full_theme = get_full_theme_description(genre, theme_number)

    # –û—Ç—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await callback_query.message.edit_text(
        "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω–∞—Ä–∏–π... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        reply_markup=None
    )

    if user and user["status"] == 2 and user["rid"] != 0:
        await bot.send_message(
            user["rid"],
            "‚è≥ –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scenario = await asyncio.get_event_loop().run_in_executor(
            thread_pool,
            generator_scenary.main,
            genre,
            full_theme
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
        await callback_query.message.edit_text(
            f"–í–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π:\n\n{scenario}"
        )

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ —Å –∫–µ–º-—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
        if user and user["status"] == 2 and user["rid"] != 0:
            await bot.send_message(
                user["rid"],
                f"‚è≥ –í–∞ —Å–æ–±–µ—Å–µ–¥–∏–∫ —Å–≥–µ–Ω–µ—Ä–∏–≤–∞–ª —Å—Ü–µ–Ω–∞—Ä–∏–π:\n\n{scenario}"
            )

    except Exception as e:
        error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        print(f"Error generating scenario: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–Ω—Ü–∏–∞—Ç–æ—Ä—É
        await callback_query.message.edit_text(
            error_message,
            reply_markup=keyboard.get_genre_keyboard()
        )

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ —Å –∫–µ–º-—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
        if user and user["status"] == 2 and user["rid"] != 0:
            await bot.send_message(
                user["rid"],
                error_message,
                reply_markup=keyboard.get_genre_keyboard()
            )


@dp.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫ —Å–æ—Ä–æ–ª–∞")
async def stop_search(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    idinty = message.from_user.id

    if user is not None:
        if user["status"] == 1:
            db.stop_search(message.from_user.id)

            await message.answer(
                "‚úÖ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–∏—Å–∫ —Å–æ—Ä–æ–ª–∞",
                reply_markup = get_main_keyboard(idinty)
            )


@dp.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def stop_chat(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    idinty = message.from_user.id

    if user is not None and user["status"] == 2 and user["rid"] != 0:
        rival_id = user["rid"]

    print(f"Debug: Stopping chat between {idinty} and {rival_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    before_update = db.database.execute(
        "SELECT id, status, rid FROM users WHERE id IN (?, ?)",
        (idinty, rival_id)
    )
    print(f"Debug: Before update - Users data: {before_update}")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Ç
    success = db.stop_chat(idinty, rival_id)

    if success:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        after_update = db.database.execute(
            "SELECT id, status, rid FROM users WHERE id IN (?, ?)",
            (idinty, rival_id)
        )
        print(f"Debug: After update - Users data: {after_update}")

        await message.answer(
            "‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å —Å–æ—Ä–æ–ª–æ–º.\n\n"
            "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ \"üîé –ù–∞–π—Ç–∏ —á–∞—Ç\"",
            reply_markup=get_main_keyboard(idinty)
        )

        try:
            await bot.send_message(
                rival_id,
                "‚ùå –° –≤–∞–º–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥.\n\n"
                "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ \"üîé –ù–∞–π—Ç–∏ —á–∞—Ç\"",
                reply_markup=get_main_keyboard(rival_id)
            )
        except Exception as e:
            print(f"Error sending message to rival: {e}")
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

@dp.message(F.text == "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞")
async def parameters(message: Message):

    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:",
        reply_markup=keyboard.get_selected_parameters_keyboard()
    )


@dp.callback_query(F.data == "set_preferred_gender")
async def set_preferred_gender(callback: CallbackQuery):

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:",
        reply_markup=keyboard.get_gender_choose_keyboard()
    )


@dp.callback_query(F.data == "set_age_range")
async def set_age_range(callback: CallbackQuery):
    set_user_state(callback.from_user.id, "waiting_min_age")
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–∏–ª–∏ –≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –ª—é–±–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞):"
    )


@dp.callback_query(F.data.startswith("pref_gender_"))
async def handle_preferred_gender(callback: CallbackQuery):
    gender = callback.data.split("_")[2]
    db.update_search_preferences(callback.from_user.id, preferred_gender=gender)

    await callback.answer("–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    await callback.message.edit_text(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª: {'–õ—é–±–æ–π' if gender == 'any' else '–ú—É–∂—Å–∫–æ–π' if gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}"
    )

@dp.callback_query(F.data.startswith("reset_preferences"))
async def set_reset_preferences(callback: CallbackQuery):
    user_id = callback.from_user.id
    db.update_search_preferences(user_id, min_age=0)
    db.update_search_preferences(user_id, max_age=0)
    db.update_search_preferences(callback.from_user.id, preferred_gender='any')
    await callback.message.edit_text(
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—à–µ–Ω—ã"
    )

@dp.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: CallbackQuery):
    await callback.message.edit_text(
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.get_admin_keyboard()
    )

@dp.callback_query(F.data == "remove_admin")
async def remove_admin_start(callback: CallbackQuery):
    if callback.from_user.id not in [Bes, Besovskaya, Serj]:
        await callback.answer("–¢–æ—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!",
                              show_alert=True)
        return

    admins = db.get_admin_list()
    keyboard = []
    protected_admins = [Bes, Besovskaya, Serj]  # —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    for admin_id in admins:
        if admin_id[0] not in protected_admins:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—Ö–¥–∏—Ç –ª–∏ –∞–¥–º–∏–Ω –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö
            keyboard.append([InlineKeyboardButton(
                text=f"‚ùå –ê–¥–º–∏–Ω ID: {admin_id[0]}",
                callback_data=f"del_admin_{admin_id[0]}"
            )])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(F.data.startswith("del_admin_"))
async def remove_admin_confirm(callback: CallbackQuery):
    if callback.from_user.id not in [Bes, Besovskaya, Serj]:
        await callback.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!",
                              show_alert=True)
        return

    admin_id = int(callback.data.split("_")[2])
    if db.remove_admin(admin_id):
        await callback.answer("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    await callback.message.edit_text(
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=keyboard.get_admin_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥
async def handle_referral_input(message: Message):
    code = message.text.strip()
    owner_id = db.get_referral_code_owner(code)

    if owner_id is not None:
        db.update_user_referral(message.from_user.id, code)
        await message.answer(
            "‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω!",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥!",
            reply_markup=get_main_keyboard(message.from_user.id)
        )

# –û–±
@dp.callback_query(F.data == "check_status")
async def check_user_status(callback: CallbackQuery):
    user_id = callback.from_user.id
    if db.is_admin(user_id):
        await callback.answer("–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä–æ!", show_alert=True)
    else:
        await callback.answer("–í—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", show_alert=True)

#–û–±
@dp.message(F.text == "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")
async def handle_complaint(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    
    if user and user["status"] == 2 and user["rid"] != 0:
        await message.answer(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:",
            reply_markup=keyboard.get_complaint_reasons_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )

@dp.message()
async def handler_message(message: Message):
    user_id = message.from_user.id
    state = get_user_state(user_id)
    user = db.get_user_cursor(user_id)
        
    if state and state.startswith("awaiting_complaint_details_"):
        reason_number = int(state.split("_")[-1])
        user = db.get_user_cursor(message.from_user.id)
            
        if user and user["status"] == 2 and user["rid"] != 0:
            reasons = {
                1: "–ù–∞—Ä—É—à–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏",
                2: "–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                3: "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è/—É–Ω–∏—á–∏–∂–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è",
                4: "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ç–µ–º–∞—Ç–∏–∫–∏ —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä",
                5: "–°–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞",
                6: "–£–≥—Ä–æ–∑—ã/–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
                7: "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∂–∞–ª–æ–±—ã",
                8: "–ù–µ–≥–∞—Ç–∏–≤ –∫ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                9: "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            }
                
            if reason_number in reasons:
                complaint_text = f"–ü—Ä–∏—á–∏–Ω–∞: {reasons[reason_number]}"
                    
                if db.add_complaint(message.from_user.id, user["rid"], complaint_text):
                    await message.answer(
                        "‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                        reply_markup=None
                    )
                else:
                    await message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã.",
                        reply_markup=None
                    )
            else:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã.",
                    reply_markup=None
                )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
    if state == "waiting_ref_code":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not db.is_admin(user_id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
            
        # –†–∞–∑–∏—Ä–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–π —Ç–µ–∫—Å—Ç
        try:
            code, owner_id = message.text.split()
            owner_id = int(owner_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–æ–¥
            existing_codes = db.get_all_referral_codes()
            if any(code == existing_code[0] for existing_code in existing_codes):
                await message.answer(
                    "‚ùå –¢–∞–∫–æ–π –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                    reply_markup=keyboard.get_admin_keyboard()
                )
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
            if db.add_referral_code(code, owner_id):
                await message.answer(
                    f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                    f"–ö–æ–¥: {code}\n"
                    f"–í–ª–∞–¥–µ–ª–µ—Ü ID: {owner_id}",
                    reply_markup=keyboard.get_admin_keyboard()
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞",
                    reply_markup=keyboard.get_admin_keyboard()
                )
                
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "–∫–æ–¥ ID\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: Tayova19 1095086092",
                reply_markup=keyboard.get_admin_keyboard()
            )
            
        finally:
            set_user_state(user_id, None)
        await handle_referral_input(message)
    elif state == "awaiting_referral_code":
        await handle_referral_input(message)
        set_user_state(user_id, None)
        return
    elif state == "awaiting_referral_code":
        await handle_referral_input(message)
        set_user_state(user_id, None)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    if user is not None and user["status"] == 2 and user["rid"] != 0:
        try:
            if message.photo:
                await bot.send_photo(
                    chat_id=user["rid"],
                    photo=message.photo[-1].file_id,
                    caption=message.caption if message.caption else None
                )
            elif message.voice:
                await bot.send_voice(  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å send_audio –Ω–∞ send_voice
                    chat_id=user["rid"],
                    voice=message.voice.file_id,
                    caption=message.caption if message.caption else None
                )
            elif message.video_note:
                await bot.send_video_note(
                    chat_id=user["rid"],
                    video_note=message.video_note.file_id
                )
            elif message.sticker:
                await bot.send_sticker(
                    chat_id=user["rid"],
                    sticker=message.sticker.file_id
                )
            elif message.text:  # –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∫–æ–Ω–µ—Ü, —Ç–∞–∫ –∫–∞–∫ text –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –º–µ–¥–∏–∞
                await bot.send_message(
                    chat_id=user["rid"],
                    text=message.text
                )
        except Exception as e:
            logging.error(f"Error sending message: {e}")
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç
            db.stop_chat(user_id, user["rid"])
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.",
                reply_markup=get_main_keyboard(user_id)
            )
            try:
                await bot.send_message(
                    user["rid"],
                    "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
                    "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.",
                    reply_markup=get_main_keyboard(user["rid"])
                )
            except:
                pass

@dp.callback_query(F.data == "cancel_complaint")
async def cancel_complaint(callback: CallbackQuery):
    set_user_state(callback.from_user.id, None)
    await callback.message.edit_text(
        "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=keyboard.get_cancel_keyboard()
    )

@dp.callback_query(lambda c: c.data.startswith("complaint_") and len(c.data.split("_")) == 2)
async def view_single_complaint(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    try:
        complaint_id = int(callback.data.split("_")[1])
        complaint_details = db.get_complaint_details(complaint_id)
        
        if not complaint_details or len(complaint_details) == 0:
            await callback.answer("–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        complaint = complaint_details[0]
        from_user = complaint[1]
        against_user = complaint[2]
        complaint_text = complaint[3]
        status = complaint[4]
        timestamp = complaint[5]
        admin_comment = complaint[6] if len(complaint) > 6 else None
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{complaint_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{complaint_id}")
            ],
            [
                InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                                   callback_data=f"block_user_{against_user}")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_complaints")]
        ])

        message_text = (
            f"üìù –ñ–∞–ª–æ–±–∞ #{complaint_id}\n"
            f"–û—Ç: {from_user}\n"
            f"–ù–∞: {against_user}\n"
            f"–¢–µ–∫—Å—Ç: {complaint_text}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–í—Ä–µ–º—è: {timestamp}\n"
        )
        if admin_comment:
            message_text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∞: {admin_comment}"

        await callback.message.edit_text(message_text, reply_markup=keyboard)
        
    except Exception as e:
        print(f"Error in view_single_complaint: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∂–∞–ª–æ–±—ã", show_alert=True)

@dp.callback_query(F.data.startswith(("approve_", "reject_")))
async def handle_complaint_action(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    try:
        action, complaint_id = callback.data.split("_")
        complaint_id = int(complaint_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∂–∞–ª–æ–±—ã
        complaint_details = db.get_complaint_details(complaint_id)
        if not complaint_details or len(complaint_details) == 0:
            await callback.answer("–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        complaint = complaint_details[0]
        against_user = complaint[2]
        complaint_text = complaint[3]
        
        if action == "reject":
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—É—é –∂–∞–ª–æ–±—É
            if db.delete_complaint(complaint_id):
                await callback.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞!")
                await view_complaints(callback)
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã!")
                
        elif action == "approve":
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
            reason_match = re.search(r"–ü—Ä–∏—á–∏–Ω–∞: (.*?)$", complaint_text)
            if not reason_match:
                await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã")
                return
                
            reason = reason_match.group(1)
            
            # –°–ª–æ–≤–∞—Ä—å –Ω–∞–∫–∞–∑–∞–Ω–∏–π (–≤ —á–∞—Å–∞—Ö) —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
            punishments = {
                "–ù–∞—Ä—É—à–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏": 24,
                "–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤": 48,
                "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è/—É–Ω–∏—á–∏–∂–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è": 48,
                "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ç–µ–º–∞—Ç–∏–∫–∏ —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä": 12,
                "–°–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞": 24,
                "–£–≥—Ä–æ–∑—ã/–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ": 168,  # 1 –Ω–µ–¥–µ–ª—è
                "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∂–∞–ª–æ–±—ã": 12,
                "–ù–µ–≥–∞—Ç–∏–≤ –∫ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏": 12,
                "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏": 12
            }
            
            block_hours = punishments.get(reason)
            if not block_hours:
                await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_blocked, current_reason = db.is_user_blocked(against_user)
            if is_blocked:
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ä–æ–∫
                if reason in current_reason:
                    block_hours *= 2  # –£–¥–≤–∞–∏–≤–∞–µ–º —Å—Ä–æ–∫ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if db.block_user(against_user, block_hours, f"–ù–∞—Ä—É—à–µ–Ω–∏–µ: {reason}"):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã
                db.update_complaint_status(complaint_id, "approved", f"–ù–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ: {block_hours} —á–∞—Å–æ–≤")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await bot.send_message(
                        against_user,
                        f"‚õîÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {block_hours} —á–∞—Å–æ–≤.\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                        f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ", callback_data="block_info")]
                        ])
                    )
                except Exception as e:
                    print(f"Error sending block notification: {e}")
                
                await callback.answer(f"–ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {block_hours} —á–∞—Å–æ–≤")
                await view_complaints(callback)
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–∞—Ç–µ–ª—è!")
                
    except Exception as e:
        print(f"Error in handle_complaint_action: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∂–∞–ª–æ–±—ã")

@dp.callback_query(F.data == "archived_complaints")
async def view_archived_complaints(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    complaints = db.get_archived_complaints()
    if not complaints:
        await callback.message.edit_text(
            "üìÅ –ê—Ä—Ö–∏–≤ –∂–∞–ª–æ–± –ø—É—Å—Ç.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
            ])
        )
        return

    keyboard = []
    for complaint in complaints:
        complaint_id = complaint[0]
        status = complaint[4]
        status_emoji = "‚úÖ" if status == "approved" else "‚ùå"
        keyboard.append([InlineKeyboardButton(
            text=f"{status_emoji} –ñ–∞–ª–æ–±–∞ #{complaint_id}",
            callback_data=f"archived_complaint_{complaint_id}"
        )])

    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    await callback.message.edit_text(
        "üìÅ –ê—Ä—Ö–∏–≤ –∂–∞–ª–æ–±:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(F.data == "manage_blocks")
async def manage_blocks(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    blocked_users = db.get_blocked_users()
    if not blocked_users:
        await callback.message.edit_text(
            "üîì –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
            ])
        )
        return

    keyboard = []
    current_time = datetime.now()
    
    for user_id, blocked_until, reason, complaint_id in blocked_users:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
        block_until = datetime.strptime(blocked_until, '%Y-%m-%d %H:%M:%S')
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        time_left = block_until - current_time
        hours_left = int(time_left.total_seconds() / 3600)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = (
            f"üîì ID: {user_id} | "
            f"–ñ–∞–ª–æ–±–∞ #{complaint_id if complaint_id else '–ù/–î'} | "
            f"–û—Å—Ç–∞–ª–æ—Å—å {hours_left}—á"
        )
        
        keyboard.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"unblock_user_{user_id}"
        )])

    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    
    await callback.message.edit_text(
        "üîì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∏—Ä–æ–≤–∫–∞–º–∏:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ä–æ—á–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(F.data.startswith("unblock_user_"))
async def unblock_user(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    user_id = int(callback.data.split("_")[2])
    if db.unblock_user(user_id):
        await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
    
    await manage_blocks(callback)

@dp.callback_query(F.data.startswith("archived_complaint_"))
async def view_archived_complaint(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    complaint_id = int(callback.data.split('_')[2])
    complaints = db.get_archived_complaints()
    complaint = next((c for c in complaints if c[0] == complaint_id), None)

    if not complaint:
        await callback.answer("–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–Ω–∞", show_alert=True)
        return

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∂–∞–ª–æ–±—ã
    complaint_id, from_user, against_user, text, status, timestamp, admin_comment = complaint[:7]
    chat_history = complaint[7:] if len(complaint) > 7 else None

    status_emoji = "‚úÖ" if status == "approved" else "‚ùå"
    message_text = (
        f"üìù –ê—Ä—Ö–∏–≤–Ω–∞—è –∂–∞–ª–æ–±–∞ #{complaint_id}\n"
        f"–û—Ç: {from_user}\n"
        f"–ù–∞: {against_user}\n"
        f"–¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã: {text}\n"
        f"–°—Ç–∞—Ç—É—Å: {status_emoji} {status}\n"
        f"–í—Ä–µ–º—è: {timestamp}\n"
    )

    if admin_comment:
        message_text += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_comment}"

    if chat_history and chat_history[0]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
        message_text += "\n\nüì® –ò—Å—Ç—Ä–∏—è —á–∞—Ç–∞:\n"
        message_text += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {chat_history[0]}\n"
        message_text += f"–í—Ä–µ–º—è: {chat_history[1]}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="archived_complaints")]
    ])

    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard
    )

def get_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    is_blocked, _ = db.is_user_blocked(user_id)
    
    if is_blocked:
        buttons = [[KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ")]]
        return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    
    buttons = []
    buttons.append([KeyboardButton(text="üîé –ù–∞–π—Ç–∏ —á–∞—Ç")])

    if not db.check_user_referral(user_id) and not db.is_admin(user_id):
        buttons.append([KeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥")])

    if db.is_admin(user_id):
        buttons.append([KeyboardButton(text="üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])

    buttons.append([KeyboardButton(text="‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞")])

    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ")
async def show_block_info_button(message: Message):
    user_id = message.from_user.id
    is_blocked, reason = db.is_user_blocked(user_id)
    
    if not is_blocked:
        await message.answer(
            "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=get_main_keyboard(user_id)
        )
        return

    block_info = db.get_block_info(user_id)
    if not block_info:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ")
        return

    blocked_until, reason, complaint_id = block_info
    
    current_time = datetime.now()
    block_until = datetime.strptime(blocked_until, '%Y-%m-%d %H:%M:%S')
    time_left = block_until - current_time
    
    total_minutes = int(time_left.total_seconds() / 60)
    hours_left = total_minutes // 60
    minutes_left = total_minutes % 60

    message_text = (
        f"‚õîÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:\n\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"üî¢ –ù–æ–º–µ—Ä –∂–∞–ª–æ–±—ã: #{complaint_id if complaint_id else '–ù/–î'}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {hours_left}—á {minutes_left}–º–∏–Ω\n"
        f"üìÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {block_until.strftime('%d.%m.%Y %H:%M')}"
    )

    await message.answer(message_text)

@dp.callback_query(F.data.startswith("complaint_"))
async def handle_complaint_reason(callback: CallbackQuery):
    if callback.data == "cancel_complaint":
        await callback.message.edit_text(
            "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=None
        )
        return
        
    try:
        reason_number = int(callback.data.split("_")[1])
        user = db.get_user_cursor(callback.from_user.id)
        
        if user and user["status"] == 2 and user["rid"] != 0:
            reasons = {
                1: "–ù–∞—Ä—É—à–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏",
                2: "–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                3: "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è/—É–Ω–∏—á–∏–∂–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è",
                4: "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ç–µ–º–∞—Ç–∏–∫–∏ —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä",
                5: "–°–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞",
                6: "–£–≥—Ä–æ–∑—ã/–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
                7: "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∂–∞–ª–æ–±—ã",
                8: "–ù–µ–≥–∞—Ç–∏–≤ –∫ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                9: "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            }
            
            if reason_number in reasons:
                complaint_text = f"–ü—Ä–∏—á–∏–Ω–∞: {reasons[reason_number]}"
                
                if db.add_complaint(callback.from_user.id, user["rid"], complaint_text):
                    await callback.message.edit_text(
                        "‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                        reply_markup=None
                    )
                else:
                    await callback.message.edit_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã.",
                        reply_markup=None
                    )
            else:
                await callback.message.edit_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã.",
                    reply_markup=None
                )
    except ValueError:
        await callback.message.edit_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∂–∞–ª–æ–±—ã.",
            reply_markup=None
        )
    except Exception as e:
        print(f"Error in handle_complaint_reason: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∂–∞–ª–æ–±—ã.",
            reply_markup=None
        )

@dp.callback_query(F.data == "cancel_complaint")
async def cancel_complaint(callback: CallbackQuery):
    set_user_state(callback.from_user.id, None)
    await callback.message.edit_text(
        "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=keyboard.get_cancel_keyboard()
    )

@dp.callback_query(lambda c: c.data.startswith("complaint_") and len(c.data.split("_")) == 2)
async def view_single_complaint(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    try:
        complaint_id = int(callback.data.split("_")[1])
        complaint_details = db.get_complaint_details(complaint_id)
        
        if not complaint_details or len(complaint_details) == 0:
            await callback.answer("–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        complaint = complaint_details[0]
        from_user = complaint[1]
        against_user = complaint[2]
        complaint_text = complaint[3]
        status = complaint[4]
        timestamp = complaint[5]
        admin_comment = complaint[6] if len(complaint) > 6 else None
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{complaint_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{complaint_id}")
            ],
            [
                InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                                   callback_data=f"block_user_{against_user}")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_complaints")]
        ])

        message_text = (
            f"üìù –ñ–∞–ª–æ–±–∞ #{complaint_id}\n"
            f"–û—Ç: {from_user}\n"
            f"–ù–∞: {against_user}\n"
            f"–¢–µ–∫—Å—Ç: {complaint_text}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–í—Ä–µ–º—è: {timestamp}\n"
        )
        if admin_comment:
            message_text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∞: {admin_comment}"

        await callback.message.edit_text(message_text, reply_markup=keyboard)
        
    except Exception as e:
        print(f"Error in view_single_complaint: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∂–∞–ª–æ–±—ã", show_alert=True)

async def block_user_with_reason(user_id: int, hours: int, reason: str, complaint_id: int = None) -> bool:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        is_blocked, current_reason = db.is_user_blocked(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ
        if is_blocked and current_reason:
            exact_reason = current_reason.split(":")[0].strip()
            if exact_reason == reason:
                hours = min(hours * 2, 168)  # –ú–∞–∫—Å–∏–º—É–º –Ω–µ–¥–µ–ª—è
        
        success = db.block_user(user_id, hours, f"{reason}: {complaint_id if complaint_id else 'Admin block'}")
        
        if success:
            try:
                await bot.send_message(
                    user_id,
                    f"‚õîÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞ {hours} —á–∞—Å–æ–≤.\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ", callback_data="block_info")]
                    ])
                )
            except Exception as e:
                logging.error(f"Failed to send block notification to user {user_id}: {e}")
        
        return success
    except Exception as e:
        logging.error(f"Error in block_user_with_reason: {e}")
        return False

@dataclass
class Complaint:
    reason: str
    details: Optional[str]
    from_user: int
    against_user: int
    
async def handle_complaint_submission(callback: CallbackQuery, reason_number: int):
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–±"""
    try:
        user = db.get_user_cursor(callback.from_user.id)
        if not user or user["status"] != 2 or not user["rid"]:
            await callback.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞")
            return

        reasons = {
            1: "–ù–∞—Ä—É—à–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏",
            2: "–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
            3: "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è/—É–Ω–∏—á–∏–∂–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è",
            4: "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ç–µ–º–∞—Ç–∏–∫–∏ —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä",
            5: "–°–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞",
            6: "–£–≥—Ä–æ–∑—ã/–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
            7: "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∂–∞–ª–æ–±—ã",
            8: "–ù–µ–≥–∞—Ç–∏–≤ –∫ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            9: "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        }

        if reason_number not in reasons:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã")
            return

        complaint = Complaint(
            reason=reasons[reason_number],
            details=None,
            from_user=callback.from_user.id,
            against_user=user["rid"]
        )

        if db.add_structured_complaint(complaint):
            await callback.message.edit_text(
                "‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã.",
                reply_markup=None
            )

    except Exception as e:
        logging.error(f"Error in handle_complaint_submission: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∂–∞–ª–æ–±—ã.",
            reply_markup=None
        )

@dp.callback_query(F.data == "view_complaints")
async def view_complaints(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    complaints = db.get_active_complaints()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–º db
    
    if not complaints:
        await callback.message.edit_text(
            "üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∂–∞–ª–æ–±—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
            ])
        )
        return

    keyboard = []
    for complaint in complaints:
        complaint_id = complaint[0]
        from_user = complaint[1]
        against_user = complaint[2]
        keyboard.append([InlineKeyboardButton(
            text=f"üìù –ñ–∞–ª–æ–±–∞ #{complaint_id} | –û—Ç: {from_user} | –ù–∞: {against_user}",
            callback_data=f"complaint_{complaint_id}"
        )])

    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])

    await callback.message.edit_text(
        "üìù –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∂–∞–ª–æ–±:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∂–∞–ª–æ–±—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    
    

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())