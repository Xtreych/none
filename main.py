import asyncio

from aiogram import Bot, F, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, \
    KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from database import database
from keyboard import online, inline
from aiogram.methods import SendPhoto

token = "7374319690:AAHLXuN-98UqMqJD0ZAkcLlrCRsoeQuGO4E"

bot = Bot(token)
dp = Dispatcher()
db = database("users.db")
link_text_news = "- –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞"
url_news = "https://t.me/RP_Anon_ChatBot_News"
link_text_TS = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
url_TS = "https://t.me/TS_RP_Anon_ChatBot"
link_text_Tayova = "- Tayova"
url_Tayova = "https://t.me/tayovamask"

Tayova = 1095086092
Bes = 1978805110
Serjantov = 686803928
Capcha = 931442055

user_states = {}
referal_codes = ["Tayova19", "–î–æ–±—Ä—ã–π"]

@dp.message(Command("start"))
async def start_message(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    idinty = message.from_user.id

    if user is None:
        db.new_user(message.from_user.id)
        await message.answer(
            "üë• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ß–∞—Ç-–±–æ—Ç —Ä–æ–ª–µ–≤–∏–∫–æ–≤!\n"
            "üó£ –ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–æ–ª–µ—Ä–æ–≤.\n\n"
            "üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞: \n"
            f'<a href="{url_news}">{link_text_news}</a>\n\n'
            f'- –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º!\n'
            f'üìû <a href="{url_TS}">{link_text_TS}</a>\n\n'
            "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
            f'<a href="{url_Tayova}">{link_text_Tayova}</a>', parse_mode='HTML',
            #reply_markup = online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
            reply_markup= InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–Ø –¥–µ–≤—É—à–∫–∞', callback_data='gender_female')],
                [InlineKeyboardButton(text='–Ø –º—É–∂—á–∏–Ω–∞', callback_data='gender_male')]
            ])
        )
    else:
        await message.answer(
            "üë• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ß–∞—Ç-–±–æ—Ç —Ä–æ–ª–µ–≤–∏–∫–æ–≤!\n\n"
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ\n\n"
            "üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞: \n"
            f'<a href="{url_news}">{link_text_news}</a>\n\n'
            f'- –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º!\n'
            f'üìû <a href="{url_TS}">{link_text_TS}</a>\n\n'
            "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
            f'<a href="{url_Tayova}">{link_text_Tayova}</a>', parse_mode='HTML',
            #f"üëÅ‚Äçüó® –õ—é–¥–µ–π –≤ –ø–æ–∏—Å–∫–µ: {db.get_users_in_search()}",
            #reply_markup = online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
            reply_markup = get_main_keyboard(idinty)
        )

@dp.message(F.text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥")
async def referral_code(message: Message):
    await message.answer("üÜî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:", reply_markup = get_back_keyboard())
    user_states[message.from_user.id] = 'awaiting_referral_code'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–æ–¥–æ–≤

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def referral_code(message: Message):
    idinty = message.from_user.id
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup = get_main_keyboard(idinty))

@dp.message(F.text == "üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
async def search_chat(message: Message):
    user = db.get_user_cursor(message.from_user.id)

    if user is not None:
        rival = db.search(message.from_user.id)

        if rival is None:
            await message.answer(
                "üîé –í—ã –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ —Å–æ—Ä–æ–ª–∞...",
                #f"üëÅ‚Äçüó® –õ—é–¥–µ–π –≤ –ø–æ–∏—Å–∫–µ: {db.get_users_in_search()}",
                reply_markup = get_search_keyboard()
            )
        else:
            db.start_chat(message.from_user.id, rival["id"])

            string = "‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω!\n"
            string += "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–∂–º–∏—Ç–µ \"‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\""

            await message.answer(string, reply_markup = online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"))
            await bot.send_message(rival["id"], string, reply_markup = online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"))

@dp.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫ —Å–æ—Ä–æ–ª–∞")
async def stop_search(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    idinty = message.from_user.id

    if user is not None:
        if user["status"] == 1:
            db.stop_search(message.from_user.id)

            await message.answer(
                "‚úÖ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–∏—Å–∫ —Å–æ—Ä–æ–ª–∞",
                reply_markup = get_main_keyboard(idinty)
            )

@dp.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def stop_chat(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    idinty = message.from_user.id

    if user is not None:
        if user["status"] == 2:
            db.stop_chat(message.from_user.id, user["rid"])

            await message.answer(
                "‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å —Å–æ—Ä–æ–ª–æ–º.\n\n"
                "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ \"üîé –ù–∞–π—Ç–∏ —á–∞—Ç\"",
                reply_markup = get_main_keyboard(idinty)
            )

            await bot.send_message(user["rid"],
                "‚ùå –° –≤–∞–º–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥.\n\n"
                "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ \"üîé –ù–∞–π—Ç–∏ —á–∞—Ç\"",
                reply_markup = get_main_keyboard(idinty)
            )

@dp.message(F.text == "–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã")
async def check_referral(message: Message):
    idinty = message.from_user.id
    if idinty == Tayova:
        count = db.count_referral('Tayova19')
        count = str(count)[1] #–í—ã–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏—à–µ–¥—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        await message.answer(f"–ö–æ–ª-–≤–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ {count}", reply_markup = get_main_keyboard(idinty))
    elif idinty == Capcha:
        count = db.count_referral('–î–æ–±—Ä—ã–π')
        count = str(count)[1]
        await message.answer(f"–ö–æ–ª-–≤–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ {count}", reply_markup=get_main_keyboard(idinty))
    elif idinty == Bes or idinty == Serjantov:
        TayovaCount = db.count_referral('Tayova19')
        TayovaCount = str(TayovaCount)[1]
        idTayovaRef = db.print_users_by_referral("Tayova19")
        CapchaCount = db.count_referral('–î–æ–±—Ä—ã–π')
        CapchaCount = str(CapchaCount)[1]
        idCapchaRef = db.print_users_by_referral("–î–æ–±—Ä—ã–π")
        await message.answer(f"–ö–æ–ª-–≤–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ –∫–æ–¥—É Tayova19: {TayovaCount}\n"
                             f"–ò—Ö id: {idTayovaRef}\n"
                             f"–ö–æ–ª-–≤–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ –∫–æ–¥—É –î–æ–±—Ä—ã–π: {CapchaCount}\n"
                             f"–ò—Ö id: {idCapchaRef}", reply_markup = get_main_keyboard(idinty))

@dp.message()
async def handler_message(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    idinty = message.from_user.id
    #if int(user["age"]) != 0:
    if user is not None:
        if user["status"] != 0:
            if user["status"] == 2:
                # await bot.send_message(1371198599, str(message))
                if message.photo is not None:
                    await bot.send_photo(chat_id=user["rid"], photo=message.photo[-1].file_id,
                                         caption = message.caption)
                elif message.text is not None:
                    await bot.send_message(user["rid"], message.text)
                elif message.voice is not None:
                    await bot.send_audio(chat_id=user["rid"], audio=message.voice.file_id,
                                            caption = message.caption)
                elif message.video_note is not None:
                    await bot.send_video_note(chat_id=user["rid"], video_note=message.video_note.file_id)
                elif message.sticker is not None:
                    await bot.send_sticker(chat_id=user["rid"], sticker = message.sticker.file_id)
        elif db.check_user_age(message.from_user.id) == 0:
            if message.text.isdigit() and 0 < int(message.text) < 80:
                age = int(message.text)
                db.update_user_age(message.from_user.id, age)
                await message.answer(f"‚úÖ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç {age} –ª–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ—Ä–æ–ª–µ—Ä–∞!",
                                       reply_markup = get_main_keyboard(idinty))
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 80).")
        elif user_states.get(idinty) == 'awaiting_referral_code':
            referral_code = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if referral_code in referal_codes:
                db.update_user_referral(message.from_user.id, referral_code)
                await message.answer(f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ '{referral_code}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", reply_markup = get_main_keyboard(idinty))

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞
                del user_states[idinty]
            else:
                await message.answer(f"‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ '{referral_code}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!", reply_markup = get_main_keyboard(idinty))

# @dp.message()
# async def handle_age_input(message: Message):
#     user = db.get_user_cursor(message.from_user.id)
#
#     if user is not None and "gender" in user:
#         if message.text.isdigit() and 0 < int(message.text) < 80:
#             age = int(message.text)
#             db.update_user_age(message.from_user.id, age)
#             await message.answer(f"‚úÖ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç {age} –ª–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ—Ä–æ–ª–µ—Ä–∞!",
#                                   reply_markup = online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç"))
#         else:
#             await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 80).")

@dp.callback_query(F.data.startswith("gender_"))
async def handle_gender_selection(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    gender = callback_query.data.split("_")[1]

    db.update_user_gender(user_id, gender)

    await bot.answer_callback_query(callback_query.id)
    if gender.capitalize() == "Male":
        await bot.send_message(user_id, "–í–∞—à –ø–æ–ª –º—É–∂—Å–∫–æ–π.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    else: await bot.send_message(user_id, "–í–∞—à –ø–æ–ª –∂–µ–Ω—Å–∫–∏–π.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")

    await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")

def get_main_keyboard(idinty):
    print(idinty)
    if idinty == Tayova or idinty == Bes or idinty == Serjantov:
        builder = ReplyKeyboardBuilder()
        builder.button(text = "üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
        builder.button(text = "–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã")
        return builder.as_markup(resize_keyboard=True)
    elif db.check_user_referral(idinty) == None:
        builder = ReplyKeyboardBuilder()
        builder.button(text = "üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
        builder.button(text = "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥")
        return builder.as_markup(resize_keyboard=True)
    else:
        builder = ReplyKeyboardBuilder()
        builder.button(text = "üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
        return builder.as_markup(resize_keyboard=True)

def get_back_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text = "–ù–∞–∑–∞–¥")
    return builder.as_markup(resize_keyboard=True)

def get_search_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫ —Å–æ—Ä–æ–ª–∞")
    return builder.as_markup(resize_keyboard=True)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())