import asyncio
import re
from concurrent.futures import ThreadPoolExecutor

from aiogram import Bot, F, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, \
    KeyboardButton, ReplyKeyboardMarkup
from database import database

import keyboard
import generator_scenary
import backup

from theme import get_full_theme_description

atoken = input("–ö–∞–∫–æ–π —Ç–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ–º?\n"
      "1 - —Ç–µ—Å—Ç-–±–æ—Ç\n"
      "2 - –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç\n")

if atoken == "1":
    token = "2079887601:AAEvAOrx9696k0CVgL2SOTz_Cb5_O5qBoTo"
else:
    token = "7374319690:AAHLXuN-98UqMqJD0ZAkcLlrCRsoeQuGO4E"

aexecutor = input("–ë–µ–∫–∞–ø –∑–∞–ø—É—Å–∫–∞—Ç—å?\n"
                  "1 - –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å\n"
                  "2 - –∑–∞–ø—É—Å–∫–∞—Ç—å\n")

bot = Bot(token)
dp = Dispatcher()
db = database("users.db")
thread_pool = ThreadPoolExecutor(max_workers=100)  # –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
executor = ThreadPoolExecutor(max_workers=2)

if aexecutor != "1":
    backup_future = executor.submit(backup.start)

link_text_news = "- –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞"
url_news = "https://t.me/RP_Anon_ChatBot_News"
link_text_TS = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
url_TS = "https://t.me/TS_RP_Anon_ChatBot"
link_text_Tayova = "- Tayova"
url_Tayova = "https://t.me/tayovamask"

#–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è
Bes = 1978805110
Besovskaya = 1171214769
Serj = 686803928

user_states = {}

@dp.message(Command("start"))
async def start_message(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    idinty = message.from_user.id

    if user is None:
        db.new_user(message.from_user.id)
        await message.answer(
            "üë• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ß–∞—Ç-–±–æ—Ç —Ä–æ–ª–µ–≤–∏–∫–æ–≤!\n"
            "üó£ –ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–æ–ª–µ—Ä–æ–≤.\n\n"
            "üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞: \n"
            f'<a href="{url_news}">{link_text_news}</a>\n\n'
            f'- –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º!\n'
            f'üìû <a href="{url_TS}">{link_text_TS}</a>\n\n'
            "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
            f'<a href="{url_Tayova}">{link_text_Tayova}</a>', parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–Ø –¥–µ–≤—É—à–∫–∞', callback_data='gender_female')],
                [InlineKeyboardButton(text='–Ø –º—É–∂—á–∏–Ω–∞', callback_data='gender_male')]
            ])
        )
    else:
        await message.answer(
            "üë• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ß–∞—Ç-–±–æ—Ç —Ä–æ–ª–µ–≤–∏–∫–æ–≤!\n\n"
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ\n\n"
            "üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞: \n"
            f'<a href="{url_news}">{link_text_news}</a>\n\n'
            f'- –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º!\n'
            f'üìû <a href="{url_TS}">{link_text_TS}</a>\n\n'
            "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
            f'<a href="{url_Tayova}">{link_text_Tayova}</a>', parse_mode='HTML',
            reply_markup=get_main_keyboard(idinty)
        )


@dp.message(F.text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥")
async def referral_code_request(message: Message):
    user_id = message.from_user.id
    owned_codes = db.get_user_referral_codes(user_id)

    if owned_codes:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        response = "üìä –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        for code in owned_codes:
            count = db.count_referral(code[0])  # code[0], —Ç–∞–∫ –∫–∞–∫ execute –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂–∏
            count = str(count)
            cleaned_count = re.sub(r"[(),]", "", count)
            response += f"–ö–æ–¥: {code[0]}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {cleaned_count}\n\n"

        await message.answer(
            response,
            reply_markup=get_main_keyboard(user_id)
        )
    else:
        # –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –∫–æ–¥
        await message.answer(
            "üÜî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:",
            reply_markup=keyboard.get_back_keyboard()
        )
        user_states[message.from_user.id] = 'awaiting_referral_code'

@dp.message(F.text == "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def open_admin_panel(message: Message):
    if db.is_admin(message.from_user.id):
        await message.answer(
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard.get_admin_keyboard()
        )

@dp.callback_query(F.data == "add_ref_code")
async def add_ref_code_start(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    user_states[callback.from_user.id] = "waiting_ref_code"
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–∫–æ–¥ ID\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: Tayova19 1095086092",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
        ])
    )

@dp.callback_query(F.data == "remove_ref_code")
async def remove_ref_code_start(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    codes = db.get_all_referral_codes()
    keyboard = []
    for code, owner_id in codes:
        keyboard.append([InlineKeyboardButton(
            text=f"‚ùå {code} (ID: {owner_id})",
            callback_data=f"del_ref_{code}"
        )])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(F.data.startswith("del_ref_"))
async def remove_ref_code(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    code = callback.data.split("_")[2]
    if db.remove_referral_code(code):
        await callback.answer("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–¥–∞!")

    await callback.message.edit_text(
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=keyboard.get_admin_keyboard()
    )

@dp.callback_query(F.data == "manage_admins")
async def manage_admins(callback: CallbackQuery):
    if callback.from_user.id not in [Bes, Besovskaya, Serj]:
        await callback.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏!", show_alert=True)
        return

    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:",
        reply_markup=keyboard.get_manage_admins_keyboard()
    )

@dp.callback_query(F.data == "add_admin")
async def add_admin_start(callback: CallbackQuery):
    if callback.from_user.id not in [Bes, Besovskaya, Serj]:
        await callback.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!", show_alert=True)
        return

    user_states[callback.from_user.id] = "waiting_admin_id"
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
        ])
    )

@dp.callback_query(F.data == "ref_stats")
async def show_ref_stats(callback: CallbackQuery):
    user_id = callback.from_user.id

    if db.is_admin(user_id):
        all_codes = db.get_all_referral_codes()
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤:\n\n"

        for code, owner_id in all_codes:
            users = db.print_users_by_referral(code)
            count = len(users) if users else 0
            response += f"–ö–æ–¥: {code}\n–í–ª–∞–¥–µ–ª–µ—Ü ID: {owner_id}\n"
            response += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {count}\n"
            response += f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n\n"
    else:
        all_codes = db.get_all_referral_codes()
        response = "üìä –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"

        for code, owner_id in all_codes:
            if owner_id == user_id:
                count = db.count_referral(code)
                response += f"–ö–æ–¥: {code}\n"
                response += f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {count}\n\n"

    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ])
    )

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def referral_code(message: Message):
    idinty = message.from_user.id
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(idinty))


@dp.message(F.text == "üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
async def search_chat(message: Message):
    user = db.get_user_cursor(message.from_user.id)

    if user is not None:
        if user["status"] == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø–æ–∏—Å–∫–µ –∏ –Ω–µ –≤ —á–∞—Ç–µ
            rival = db.search(message.from_user.id)

            if rival is None:
                await message.answer(
                    "üîé –í—ã –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ —Å–æ—Ä–æ–ª–∞...",
                    reply_markup=keyboard.get_search_keyboard()
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                string = "‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω!\n"
                string += "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–∂–º–∏—Ç–µ \"‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\""

                await message.answer(string, reply_markup=keyboard.get_cancel_keyboard())
                try:
                    await bot.send_message(rival["id"], string, reply_markup=keyboard.get_cancel_keyboard())
                except Exception as e:
                    print(f"Error sending message to rival: {e}")
                    # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ—Ç–∫–∞—Ç–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                    db.stop_chat(message.from_user.id, rival["id"])
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            await message.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∏—Å–∫–µ –∏–ª–∏ —á–∞—Ç–µ!")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text == "–°—Ü–µ–Ω–∞—Ä–∏–π")
async def check_referral(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è:",
        reply_markup=keyboard.get_genre_keyboard()
    )

@dp.callback_query(F.data.startswith("gender_"))
async def handle_gender_selection(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    gender = callback_query.data.split("_")[1]

    db.update_user_gender(user_id, gender)

    await bot.answer_callback_query(callback_query.id)
    if gender.capitalize() == "Male":
        await bot.send_message(user_id, "–í–∞—à –ø–æ–ª –º—É–∂—Å–∫–æ–π.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    else: await bot.send_message(user_id, "–í–∞—à –ø–æ–ª –∂–µ–Ω—Å–∫–∏–π.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")

    await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")

@dp.callback_query(F.data.startswith("genre_"))
async def handle_genre_selection(callback_query: CallbackQuery):
    genre = callback_query.data.split("_")[1]
    genre_names = {
        "post": "–ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å",
        "romance": "–†–æ–º–∞–Ω—Ç–∏–∫–∞",
        "cyber": "–ö–∏–±–µ—Ä–ø–∞–Ω–∫",
        "fantasy": "–§—ç–Ω—Ç–µ–∑–∏",
        "mystic": "–ú–∏—Å—Ç–∏–∫–∞",
        "history": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è",
        "scifi": "–ù–∞—É—á–Ω–∞—è –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
        "horror": "–•–æ—Ä—Ä–æ—Ä",
        "super": "–°—É–ø–µ—Ä–≥–µ—Ä–æ–∏–∫–∞",
        "terror": "–£–∂–∞—Å—ã",
        "detective": "–î–µ—Ç–µ–∫—Ç–∏–≤",
        "dystopia": "–î–∏—Å—É—Ç–æ–ø–∏—è"
    }

    selected_genre = genre_names.get(genre, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∂–∞–Ω—Ä")
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–∞–Ω—Ä: {selected_genre}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=keyboard.get_theme_keyboard(genre)
    )


@dp.callback_query(F.data.startswith("theme_"))
async def handle_theme_selection(callback_query: CallbackQuery):
    theme_data = callback_query.data.split("_")
    genre = theme_data[1]
    theme_number = int(theme_data[2])
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = db.get_user_cursor(user_id)

    full_theme = get_full_theme_description(genre, theme_number)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await callback_query.message.edit_text(
        "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω–∞—Ä–∏–π... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        reply_markup=None
    )

    if user and user["status"] == 2 and user["rid"] != 0:
        await bot.send_message(
            user["rid"],
            "‚è≥ –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scenario = await asyncio.get_event_loop().run_in_executor(
            thread_pool,
            generator_scenary.main,
            genre,
            full_theme
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
        await callback_query.message.edit_text(
            f"–í–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π:\n\n{scenario}"
        )

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ —Å –∫–µ–º-—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
        if user and user["status"] == 2 and user["rid"] != 0:
            await bot.send_message(
                user["rid"],
                f"‚è≥ –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Å—Ü–µ–Ω–∞—Ä–∏–π:\n\n{scenario}"
            )

    except Exception as e:
        error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        print(f"Error generating scenario: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
        await callback_query.message.edit_text(
            error_message,
            reply_markup=keyboard.get_genre_keyboard()
        )

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ —Å –∫–µ–º-—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
        if user and user["status"] == 2 and user["rid"] != 0:
            await bot.send_message(
                user["rid"],
                error_message,
                reply_markup=keyboard.get_genre_keyboard()
            )


@dp.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫ —Å–æ—Ä–æ–ª–∞")
async def stop_search(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    idinty = message.from_user.id

    if user is not None:
        if user["status"] == 1:
            db.stop_search(message.from_user.id)

            await message.answer(
                "‚úÖ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–∏—Å–∫ —Å–æ—Ä–æ–ª–∞",
                reply_markup = get_main_keyboard(idinty)
            )


@dp.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def stop_chat(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    idinty = message.from_user.id

    if user is not None and user["status"] == 2 and user["rid"] != 0:
        rival_id = user["rid"]

        print(f"Debug: Stopping chat between {idinty} and {rival_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        before_update = db.database.execute(
            "SELECT id, status, rid FROM users WHERE id IN (?, ?)",
            (idinty, rival_id)
        )
        print(f"Debug: Before update - Users data: {before_update}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Ç
        success = db.stop_chat(idinty, rival_id)

        if success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            after_update = db.database.execute(
                "SELECT id, status, rid FROM users WHERE id IN (?, ?)",
                (idinty, rival_id)
            )
            print(f"Debug: After update - Users data: {after_update}")

            await message.answer(
                "‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å —Å–æ—Ä–æ–ª–æ–º.\n\n"
                "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ \"üîé –ù–∞–π—Ç–∏ —á–∞—Ç\"",
                reply_markup=get_main_keyboard(idinty)
            )

            try:
                await bot.send_message(
                    rival_id,
                    "‚ùå –° –≤–∞–º–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥.\n\n"
                    "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ \"üîé –ù–∞–π—Ç–∏ —á–∞—Ç\"",
                    reply_markup=get_main_keyboard(rival_id)
                )
            except Exception as e:
                print(f"Error sending message to rival: {e}")
        else:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

@dp.message(F.text == "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞")
async def parameters(message: Message):

    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:",
        reply_markup=keyboard.get_selected_parameters_keyboard()
    )


@dp.callback_query(F.data == "set_preferred_gender")
async def set_preferred_gender(callback: CallbackQuery):

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:",
        reply_markup=keyboard.get_gender_choose_keyboard()
    )


@dp.callback_query(F.data == "set_age_range")
async def set_age_range(callback: CallbackQuery):
    user_states[callback.from_user.id] = "waiting_min_age"
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –ª—é–±–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞):"
    )


@dp.callback_query(F.data.startswith("pref_gender_"))
async def handle_preferred_gender(callback: CallbackQuery):
    gender = callback.data.split("_")[2]
    db.update_search_preferences(callback.from_user.id, preferred_gender=gender)

    await callback.answer("–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    await callback.message.edit_text(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª: {'–õ—é–±–æ–π' if gender == 'any' else '–ú—É–∂—Å–∫–æ–π' if gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}"
    )

@dp.callback_query(F.data.startswith("reset_preferences"))
async def set_reset_preferences(callback: CallbackQuery):
    user_id = callback.from_user.id
    db.update_search_preferences(user_id, min_age=0)
    db.update_search_preferences(user_id, max_age=0)
    db.update_search_preferences(callback.from_user.id, preferred_gender='any')
    await callback.message.edit_text(
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã"
    )

@dp.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: CallbackQuery):
    await callback.message.edit_text(
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.get_admin_keyboard()
    )

@dp.callback_query(F.data == "remove_admin")
async def remove_admin_start(callback: CallbackQuery):
    if callback.from_user.id not in [Bes, Besovskaya, Serj]:
        await callback.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!",
                              show_alert=True)
        return

    admins = db.get_admin_list()
    keyboard = []
    protected_admins = [Bes, Besovskaya, Serj]  # —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    for admin_id in admins:
        if admin_id[0] not in protected_admins:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—Ö–æ–¥–∏—Ç –ª–∏ –∞–¥–º–∏–Ω –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö
            keyboard.append([InlineKeyboardButton(
                text=f"‚ùå –ê–¥–º–∏–Ω ID: {admin_id[0]}",
                callback_data=f"del_admin_{admin_id[0]}"
            )])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(F.data.startswith("del_admin_"))
async def remove_admin_confirm(callback: CallbackQuery):
    if callback.from_user.id not in [Bes, Besovskaya, Serj]:
        await callback.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!",
                              show_alert=True)
        return

    admin_id = int(callback.data.split("_")[2])
    if db.remove_admin(admin_id):
        await callback.answer("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    await callback.message.edit_text(
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=keyboard.get_admin_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
async def handle_referral_input(message: Message):
    code = message.text.strip()
    owner_id = db.get_referral_code_owner(code)

    if owner_id is not None:
        db.update_user_referral(message.from_user.id, code)
        await message.answer(
            "‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω!",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥!",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
    user_states[message.from_user.id] = None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(F.data == "check_status")
async def check_user_status(callback: CallbackQuery):
    user_id = callback.from_user.id
    if db.is_admin(user_id):
        await callback.answer("–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", show_alert=True)
    else:
        await callback.answer("–í—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", show_alert=True)

@dp.message()
async def handler_message(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    idinty = message.from_user.id
    state = user_states.get(message.from_user.id)

    if user is not None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
        if user["status"] == 2 and user["rid"] != 0:
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
                if message.photo:
                    await bot.send_photo(
                        chat_id=user["rid"],
                        photo=message.photo[-1].file_id,
                        caption=message.caption if message.caption else None
                    )
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
                elif message.text:
                    await bot.send_message(
                        chat_id=user["rid"],
                        text=message.text
                    )
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                elif message.voice:
                    await bot.send_voice(
                        chat_id=user["rid"],
                        voice=message.voice.file_id,
                        caption=message.caption if message.caption else None
                    )
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞
                elif message.video_note:
                    await bot.send_video_note(
                        chat_id=user["rid"],
                        video_note=message.video_note.file_id
                    )
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
                elif message.sticker:
                    await bot.send_sticker(
                        chat_id=user["rid"],
                        sticker=message.sticker.file_id
                    )
            except Exception as e:
                print(f"Error sending message: {e}")
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.",
                    reply_markup=get_main_keyboard(idinty)
                )
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                db.stop_chat(message.from_user.id, user["rid"])
                return

        elif state == "waiting_ref_code":
            try:
                code, owner_id = message.text.split()
                owner_id = int(owner_id)
                if db.add_referral_code(code, owner_id):
                    await message.answer("‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞!")
            except:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫–æ–¥ ID")

            user_states[message.from_user.id] = None
            await message.answer(
                "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                reply_markup=keyboard.get_admin_keyboard()
            )
        elif state == "waiting_admin_id":
            try:
                new_admin_id = int(message.text)
                if db.add_admin(new_admin_id):
                    await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {new_admin_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            except:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

            user_states[message.from_user.id] = None
            await message.answer(
                "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                reply_markup=keyboard.get_admin_keyboard()
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        elif state == "waiting_min_age":
            if message.text.isdigit() and 0 <= int(message.text) <= 100:
                min_age = int(message.text)
                user_states[idinty] = "waiting_max_age"
                db.update_search_preferences(idinty, min_age=min_age)
                await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (0-100)")

        elif state == "waiting_max_age":
            if message.text.isdigit() and 0 <= int(message.text) <= 100:
                max_age = int(message.text)
                min_age = db.get_search_preferences(idinty)["min_age"]

                if max_age >= min_age:
                    db.update_search_preferences(idinty, max_age=max_age)
                    user_states[idinty] = None
                    await message.answer(
                        f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {min_age}-{max_age} –ª–µ—Ç",
                        reply_markup=get_main_keyboard(idinty)
                    )
                else:
                    await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ")
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (0-100)")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        elif db.check_user_age(message.from_user.id) == 0:
            if message.text.isdigit() and 0 < int(message.text) < 80:
                age = int(message.text)
                db.update_user_age(message.from_user.id, age)
                await message.answer(
                    f"‚úÖ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç {age} –ª–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ—Ä–æ–ª–µ—Ä–∞!",
                    reply_markup=get_main_keyboard(idinty)
                )
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1-79)")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        elif state == "awaiting_referral_code":
            await handle_referral_input(message)

def get_main_keyboard(user_id):
    buttons = []
    buttons.append([KeyboardButton(text="üîé –ù–∞–π—Ç–∏ —á–∞—Ç")])

    if not db.check_user_referral(user_id) and not db.is_admin(user_id):
        buttons.append([KeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥")])

    if db.is_admin(user_id):
        buttons.append([KeyboardButton(text="üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])

    buttons.append([KeyboardButton(text="‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞")])

    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())